{
	"docs": [
	{
		"name": "Common",
		"properties": [
			{
				"name" : "play()",
				"description" : "Causes the timeline to begin playing. When called from inside a symbol, the parent of the symbol's timeline is played.",
				"example" : "play();",
				"args" : [],
				"return" : null
			}, {
				"name" : "stop()",
				"description" : "Causes the timeline to stop. When called from inside a symbol, the parent of the symbol's timeline is stopped.",
				"example" : "stop();",
				"args" : [],
				"return" : null
			}, {
				"name" : "gotoAndStop(frame)",
				"description" : "Moves the playhead to 'frame' and causes the timeline to stop. When called from inside a symbol, the parent of the symbol's timeline is moved.",
				"example" : "// Go to frame 2 and stop the timeline\ngotoAndStop(2);\n// Go to 'menu' and stop the timeline\ngotoAndStop('menu');",
				"args" : [{"name": "frame", "type": "Number", "description": "index of the frame to jump to"}],
				"return" : null
			}, {
				"name" : "gotoAndPlay(frame)",
				"description" : "Moves the playhead to 'frame' and plays the timeline from there. When called from inside a symbol, the parent of the symbol's timeline is moved.",
				"example" : "// Go to frame to and play the timeline\ngotoAndPlay(2);\n// Go to 'jump' and play the timeline\ngotoAndPlay('jump');",
				"args" : [{"name": "frame", "type": "Number", "description": "index of the frame to jump to"}],
				"return" : null
			}, {
				"name" : "gotoNextFrame()",
				"description" : "Moves the playhead to the next frame. If called on the last frame, gotoNextFrame() does nothing. When called from inside a symbol, the parent of the symbol's timeline is moved.",
				"example" : "gotoNextFrame();",
				"args" : [],
				"return" : null
			}, {
				"name" : "gotoPrevFrame()",
				"description" : "Moves the playhead to the previous frame. If called on the first frame, gotoPrevFrame() does nothing. When called from inside a symbol, the parent of the symbol's timeline is moved.",
				"example" : "gotoPrevFrame();",
				"args" : [],
				"return" : null
			}, {
				"name" : "stopAllSounds()",
				"description" : "Stops any sounds currently being played.",
				"example" : "stopAllSounds();",
				"args" : [],
				"return" : null
			}
		]
	}, {
		"name": "Input",
		"properties": [
			{
				"name" : "getMouseX()",
				"description" : "Returns the x-location of the mouse on the project canvas. The origin (0,0) is the upper-left corner of the canvas.",
				"example" : "// Sets the object's x-position to the mouse's x-position.\nthis.x = getMouseX();",
				"args" : [],
				"return" : {"type": "Number", "description": "x-location of the mouse"}
			}, {
				"name" : "getMouseY()",
				"description" : "Returns the y-location of the mouse on the project canvas. The origin (0,0) is the upper-left corner of the canvas.",
				"example" : "// Sets the object's y-position to the mouse's y-position.\nthis.y = getMouseY();",
				"args" : [],
				"return" : {"type": "Number", "description": "x-location of the mouse"}
			}, {
				"name" : "isKeyDown(key)",
				"description" : "Returns true if 'key' is currently pressed and false otherwise. Casing does not matter i.e. isKeyDown('a') is equivalent to isKeyDown('A').",
				"example" : "// If SPACE is pressed, move this object right by 10 pixels\nif (isKeyDown('SPACE')) { \n\tthis.x += 10;\n}",
				"args" : [{"name" : "key", "type" : "String", "description" : "Any character such as 'A' or special characters including 'SPACE', 'UP', 'DOWN', 'LEFT', 'RIGHT', 'BACKSPACE', 'TAB', 'ENTER', 'SHIFT', 'CTRL', 'COMMAND', 'ALT', 'WINDOWS', 'F1', 'NUM 0', 'NUM LOCK'"}],
				"return" : {"type": "Boolean", "description": "true if key is down, false otherwise."}
			}, {
				"name" : "getTiltX()",
				"description" : "Returns the x-coordinate tilt of the device. This function only works on devices with an accelerometer/gyroscope (such as smartphones).",
				"example" : "// Move this object in the direction of the device's tilt\nthis.x = getTiltX();",
				"args" : [],
				"return" : {"type": "Number", "description": "The x-coordinate tilt of the device"}
			}, {
				"name" : "getTiltY()",
				"description" : "Returns the x-coordinate tilt of the device. This function only works on devices with an accelerometer/gyroscope (such as smartphones)",
				"example" : "// Move this object in the direction of the device's tilt\nthis.y = getTiltY();",
				"args" : [],
				"return" : {"type": "Number", "description": "The y-coordinate tilt of the device"}
			}
		]
	}, {
		"name": "Scope",
		"properties": [
			{
				"name" : "this",
				"description" : "When used inside of a script, ‘this’ refers to the symbol the script belongs to.",
				"example" : "// Move the symbol which ran this script to the right by one pixel\nthis.x += 1;",
				"args" : [],
				"return" : null

			}, {
				"name" : "root",
				"description" : "Refers to the 'root' object. The root object contains all other objects. The root object has no parent and holds the 'root' timeline which controls the main information being shown. The keyword root can be used in any script.",
				"example" : "// Moves the playhead on the root timeline to frame 2 and stops the root timeline\nroot.gotoAndStop(2);",
				"args" : [],
				"return" : null
			}, {
				"name" : "parent",
				"description" : "Refers to the parent of the object which uses the 'parent' keyword in a script. 'parent' can be used to access the parent object's timeline, or other objects contained within the parent.",
				"example" : "// Moves the playhead on the parent obect's timeline to frame 2 and plays that timeline\nparent.gotoAndPlay(2);",
				"args" : [], 
				"return" : null
			}
		]
	}, {
		"name": "Wick Objects : General",
		"properties": [
			{
				"name" : "x",
				"type" : "Number",
				"description" : "Refers to the x-location (left-to-right) of the object.",
				"example" : "this.x += 1; // Moves the object to the right by 1 pixel",
				"args" : [], 
				"return" : null
			}, {
				"name" : "y",
				"type" : "Number",
				"description" : "Refers to the y-location (top-to-bottom) of the object. Y values increase as you go down on the canvas.",
				"example" : "this.y += 1; // Moves the object down by one pixel",
				"args" : [],
				"return" : null
			}, {
				"name" : "scaleX",
				"type" : "Number",
				"description" : "Scales the width of the object. By default scaleX is set to 1.",
				"example" : "this.scaleX = 2; // Doubles the width of this object.",
				"args" : [], 
				"return" : null
			}, {
				"name" : "scaleY",
				"type" : "Number",
				"description" : "Scales the height of the object. By default scaleY is set to 1.",
				"example" : "this.scaleY = 2; // Doubles the height of this object.",
				"args" : [],
				"return" : null
			}, {
				"name" : "rotation",
				"type" : "Number", 
				"description" : "Controls the angle of rotation on the object in degrees.",
				"example" : "this.rotation += 10; // Rotate this object 10 degrees to the right",
				"args" : [], 
				"return" : null
			}, {
				"name" : "flipX",
				"type" : "Boolean",
				"description" : "A boolean which determines whether or not to flip the wickObject horizontally. By default flipX is set to false.",
				"example" : "this.flipX = true; // Flip this object horizontally.",
				"args" : [],
				"return" : null
			}, {
				"name" : "flipY",
				"type" : "Boolean",
				"description" : "A boolean which determines whether or not to flip the wickObject vertically. By default flipY is set to false.",
				"example" : "this.flipY = true; // Flip this object vertically.",
				"args" : [],
				"return" : null
			}, {
				"name" : "opacity",
				"type" : "Number",
				"description" : "A value between 0 and 1 which determines how transparent an object is. 1 is completely opaque while 0 is completely transparent. By default opacity is set to 1.",
				"example" : "this.opacity = 0.8; // Make this object slightly transparent.",
				"args" : [], 
				"return" : null
			}, {
				"name" : "clone()",
				"description" : "The resulting clone.",
				"example" : "var myClone = this.clone(); // Creates a clone of the current wick object and stores it in the variable myClone",
				"args" : [], 
				"return" : {"type" : "WickObject", "description" : "A clone of the WickObject which calls clone()."}
			}, {
				"name" : "delete()",
				"description" : "Deletes this WickObject completely.",
				"example" : "this.delete(); // Removes the wickObject from the scene.",
				"args" : [],
				"return" : null
			}, {
				"name" : "hitTest(otherObject, hitTestType)",
				"description" : "hitTest() checks for a collision with another WickObject."  ,
				"example" : "// If this object collides with objectTwo delete this object\nif (this.hitTest(objectTwo)) {\n\tthis.delete(); \n} ",
				"args" : [{"name" : "otherObject", "type" : "WickObject", "description" : "Wick Object to check for collision with."}, 
				          {"name" : "hitTestType", "type" : "String", "description" : "Type of hit detection to use. Can be 'rectangles' or 'circles'. If no hitTestType is given, hitTest defaults to 'rectangles'"}],
				"return" : null
			}, {
				"name" : "isHoveredOver()",
				"description" : "Returns true if the mouse is hovering over this object.",
				"example" : "if (this.isHoveredOver()) {\n\tthis.rotation += 10;\n}",
				"args" : [],
				"return" : null
			}, {
				"name" : "setCursor(cursor)",
				"description" : "Sets the cursor to be different on hover. You can find a list of available cursor types <a href='http://www.w3schools.com/cssref/pr_class_cursor.asp'>here</a>.",
				"example" : "this.setCursor('grab');\nthis.setCursor('help');\nthis.setCursor('default');" ,
				"args" : [],
				"return" : null
			}

		]
	}, {
		"name": "Wick Objects : Text",
		"properties": [
	 	    {
				"name" : "setText(text)",
				"description" : "Sets the text of a text WickObject to 'text'.",
				"example" : "this.setText('Apple'); // Sets the visible text to 'Apple'",
				"args" : [{"name" : "text", "type" : "String", "description" : "A string to set this text object to."}],
				"return" : null
			}
		]
	}, {
		"name": "Wick Objects : Sound",
		"properties": [
	 	    {
				"name" : "playSound()",
				"description" : "Plays the sound associated with this object.",
				"example" : "this.playSound();",
				"args" : [], 
				"return" : null
			}, {
				"name" : "stopSound()",
				"description" : "Stops the sound associated with this object. If no sound is playing stopSound() does nothing.",
				"example" : "this.stopSound();",
				"args" : [],
				"return" : null
			}, {
				"name" : "setVolume(volume)",
				"description" : "Changes the gain of the associated sound. 'volume' should be a value from 0 to 1. Values greater than 1 can work, but may cause distortion.",
				"example" : "this.setVolume(0.8);",
				"args" : [{"name" : "volume", "type" : "Number", "description" : "Value to set the gain to."}]
			}
		]
	}, {
		"name": "Wick Objects : Timeline",
		"properties": [
			{
				"name" : "play()",
				"description" : "Plays this symbol's timeline. Refer to the general timeline documentation for play() for further information.",
				"example" : "this.play();",
				"return" : null,
				"args" : []
			}, {
				"name" : "stop()",
				"description" : "Stops the symbol's timeline. Refer to the general timeline documentation for stop() for further information.",
				"example" : "this.stop();",
				"return" : null,
				"args" : []
			}, {
				"name" : "gotoAndStop(frame)",
				"description" : "Moves the playhead of the symbol's timeline to 'frame' and stops that timeline. Refer to the general timeline documentation for gotoAndStop(frame) for further information.",
				"example" : "this.gotoAndStop(2);",
				"args" : [{"name": "frame", "type": "Number", "description": "frame number or name to jump to"}]
			}, {
				"name" : "gotoAndPlay(frame)",
				"description" : "Moves the playhead of the symbol's timeline to 'frame' and stops that timeline. Refer to the general timeline documentation for gotoAndPlay(frame) for further information.",
				"example" : "this.gotoAndPlay(2);",
				"args" : [{"name": "frame", "type": "Number", "description": "frame number or name to jump to"}]
			}, {
				"name" : "gotoNextFrame()",
				"description" : "Goes to the next frame on this symbol's timeline. Refer to the general timeline documentation for gotoNextFrame() for further information.",
				"example" : "this.gotoNextFrame();",
				"args" : []
			}, {
				"name" : "gotoPrevFrame()",
				"description" : "Goes to the previous frame on this symbol's timeline. Refer to the general timeline documentation for gotoPrevFrame() for further information.",
				"example" : "this.gotoPrevFrame();",
				"args" : []
			}
		]
	}, {
		"name": "Utilities",
		"properties": [
			{
				"name" : "random.bool()",
				"description" : "Generates a random boolean, a value that can be either true or false.",
				"example" : "// Use random.bool() to simulate a coin flip.\nvar coinFlip = random.bool();\nif(coinFlip == true) {\n\talert('You&#8217;re lucky!!');\n}",
				"return" : {"type": "Boolean", "description": "A random boolean. Will be true 50% of the time."},
				"args" : []
			}, {
				"name" : "random.integer(min, max)",
				"description" : "Generates a random whole number from min to max.",
				"example" : "// Use random.integer() to move to a random frame from 1-10.\nvar randomFrame = random(integer(1,10));\ngotoAndStop(randomFrame);",
				"return" : {"type": "Number", "description": "A random whole number."},
				"args" : []
			}, {
				"name" : "random.real(min, max)",
				"description" : "Generates a random real (fractional) number from min to max.",
				"example" : "// Use random.real() to choose how transparent an object appears.\nthis.opacity = random.real(0,1);",
				"return" : {"type": "Number", "description": "A random real number."},
				"args" : []
			}, {
				"name" : "localStorage",
				"description" : "Use the localStorage object to save data that should ",
				"example" : "// Use localStorage to load a saved position. \nthis.x = localStorage.savedX;\nthis.y = localStorage.savedY;\n\n// Save the position and rotation of an object in localStorage to use later.\nlocalStorage.savedX = this.x\nlocalStorage.savedY = this.y",
				"return" : null,
				"args" : []
			}
		]
	}]
}