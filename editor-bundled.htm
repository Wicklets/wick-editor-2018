<script>var bundledPlayerCode = "document.addEventListener('DOMContentLoaded', function(event) {  var frames = [[]]; var currentFrame = 1; var projectLoaded = false; var mousePos;  var loadBundledJSONWickProject = true;  var canvas = document.getElementById('canvas'); var context = canvas.getContext('2d');    if(loadBundledJSONWickProject) {  loadJSONProject(bundledJSONProject); } else { var fileInput = document.getElementById('projectFile'); fileInput.addEventListener('change', function(e) {  var file = fileInput.files[0]; var reader = new FileReader(); reader.onload = function(e) { loadJSONProject(reader.result); }; reader.readAsText(file); }); }    function getMousePos(canvas, evt) { var rect = canvas.getBoundingClientRect(); return { x: evt.clientX - rect.left, y: evt.clientY - rect.top }; }  canvas.addEventListener('mousemove', function(evt) { if(projectLoaded) { mousePos = getMousePos(canvas, evt);  var hoveredOverObj = false; for(var i = 0; i < frames[currentFrame].length; i++) { var obj = frames[currentFrame][i]; if(obj.wickData.clickable && mouseInsideObj(obj)) { hoveredOverObj = true; break; } } if(hoveredOverObj) { document.getElementById('canvasContainer').style.cursor = 'pointer'; } else { document.getElementById('canvasContainer').style.cursor = 'default'; } } }, false);  document.getElementById('canvasContainer').addEventListener('mousedown', function(event) { for(var i = 0; i < frames[currentFrame].length; i++) { var obj = frames[currentFrame][i]; if(obj.wickData.clickable && mouseInsideObj(obj)) { currentFrame = obj.wickData.toFrame; console.log('Went to frame ' + currentFrame); break; } } }, false);    function mouseInsideObj(obj) { return mousePos.x >= obj.left && mousePos.y >= obj.top && mousePos.x <= obj.left + obj.width && mousePos.y <= obj.top + obj.height; }    window.addEventListener('resize', resizeCanvas, false); function resizeCanvas() { canvas.width = window.innerWidth; canvas.height = window.innerHeight; } resizeCanvas();  var FPS = 30; setInterval(function() { if(projectLoaded) { update(); draw(); } }, 1000/FPS);  function update() {  }  function draw() { context.fillStyle = '#FFFFFF'; context.rect(0, 0, canvas.width, canvas.height); context.fill();  for(var i = 0; i < frames[currentFrame].length; i++) { var obj = frames[currentFrame][i]; context.drawImage(obj.image, obj.left, obj.top); } }    function loadJSONProject(proj) { frames = JSON.parse(proj); projectLoaded = true;  for(var f = 0; f < frames.length; f++) { console.log('Loading frame '+f+'...'); var frame = frames[f]; for(var i = 0; i < frame.length; i++) { var obj = frame[i]; obj.image = new Image(); obj.image.src = obj.src; console.log('Loaded object ' + obj.wickData.name); } } }  });";</script><!DOCTYPE html>
<html>

<head>
	<title>Wick Editor</title>

	<link rel="stylesheet" type="text/css" href="gui.css">

	<style type="text/css">
		#menuBarGUI {
			top: 0px;
			left: 0px;
			text-align: center;
		}

		#timelineGUI {
			width: 130px;
			top: 0px;
			left: 0px;
			text-align: center;
		}

		#rightClickMenu {
			top: 0px;
			left: 0px;
			background-color: #DDDDDD;
			visibility: hidden;
		}
	</style>

	<script src="jquery.min.js"></script>
	<script src="fabric.js"></script>
	<script src="FileSaver.min.js"></script>

	<script src="wickObjects.js"></script>
	<script src="editor.js"></script>
</head>

<body>
	<div id="canvasContainer">
		<canvas id="canvas"></canvas>
	</div>

	<div id="menuBarGUI" class="GUIBox">
		Wick Editor Dev<br />
		<hr />
		<button type="button" id="exportJSONButton">Export Project as JSON</button><br />
		<button type="button" id="exportHTMLButton">Export Project as HTML</button><br />
		<button type="button" id="importButton">Import Project</button><br />
	</div>

	<div id="timelineGUI" class="GUIBox">
		<button type="button" id="prevFrameButton"><-</button>
		<textarea id="frameSelector" rows="1" cols="3"></textarea>
		<button type="button" id="nextFrameButton">-></button>

		<br />

		<button type="button" id="cloneFrameButton">Clone Frame</button>
		<button type="button" id="gotoFrameButton">Go</button>
	</div>

	<div id="rightClickMenu" class="GUIBox">
		<div id="objectManipButtons">
			<button type="button" id="sendToBackButton">Send To Back</button><br/>
			<button type="button" id="bringToFrontButton">Bring To Front</button><br/>
			<button type="button" id="addScriptButton">Add Script...</button><br/>
			<button type="button" id="testActionButton">Test Action</button><br/>
			<button type="button" id="deleteButton">Delete</button><br/>
			<hr />
		</div>
		<button type="button" id="clearFrameButton">Clear Frame</button><br/>
	</div>
</body>

</html>
